name: Lint

on:
  workflow_call:

jobs:
  lint:
    name: Fmt and clippy
    strategy:
      matrix:
        rust-version: ["nightly", "stable"]
        cache-key: [""]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: "Update"
        run: |
          sudo apt-get update
          sudo apt-get dist-upgrade -y 
          sudo apt-get autoremove -y

      - name: "Install Rust"
        run: |
          rustup toolchain install ${{ matrix.rust-version }} --profile minimal --no-self-update
          rustup component add rustfmt clippy --toolchain ${{ matrix.rust-version }}
          rustup default ${{ matrix.rust-version }}
          rustup update
        shell: bash
      - uses: ikalnytskyi/action-setup-postgres@v4
        with:
          username: postgres
          password: mysecretpassword
          database: postgres
          port: 5432
        id: postgres

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.cache-key }}
      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features postgres
      - name: Migrate database
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}
          PG_USER: postgres
          PG_PASSWORD: mysecretpassword
          VIRUSTOTAL_API_KEY: ${{secrets.VIRUSTOTAL_API_KEY}}
        run: |
          sqlx database create
          sqlx migrate run --source migrations/
          cargo sqlx prepare --workspace -- --tests

      - name: Run cargo fmt
        if: matrix.rust-version == 'nightly'
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}
          PG_USER: postgres
          PG_PASSWORD: mysecretpassword
          VIRUSTOTAL_API_KEY: ${{secrets.VIRUSTOTAL_API_KEY}}
        run: cargo fmt --all -- --check

      - name: Run clippy
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}
          PG_USER: postgres
          PG_PASSWORD: mysecretpassword
          VIRUSTOTAL_API_KEY: ${{secrets.VIRUSTOTAL_API_KEY}}
        if: success() || failure()
        run: cargo clippy --all -- -D clippy::all -D warnings --allow clippy::needless_return
